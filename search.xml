<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[浅析《简约至上：交互式设计四策略》]]></title>
      <url>http://chanh.xyz/2016/06/25/simple-and-usable-web-mobile-and-interaction-design/</url>
      <content type="html"><![CDATA[<p>本书作者 Giles Colborne 曾任职于英国航空公司，英国物理学会出版社和灵智集团，二十多年潜心钻研交互式设计与易用性，颇有建树…<br>个人认为，无论是广告设计、室内设计、架构设计或是产品设计等等，设计方法和技巧都是相通的。因为都是针对特定人群而设计的，或者说都有自己的用户，且与用户之间都有交互。<br><a id="more"></a><br>本书主要分为两部分，第一部分：前两章主要介绍“什么是简约？”，“用户分为几种？”，“设计初期的准备与技巧”。第二部分：后面章节主要讲述交互设计的四策略：删除，组织，隐藏，转移。下面按两部分来分析一下作者的设计思想。</p>
<h2 id="明确认识简约设计"><a href="#明确认识简约设计" class="headerlink" title="明确认识简约设计"></a>明确认识简约设计</h2><p>这部分主要介绍简约的概念及如何理解简约设计，还有一些设计基本技巧。</p>
<h3 id="什么样的设计是简约设计？"><a href="#什么样的设计是简约设计？" class="headerlink" title="什么样的设计是简约设计？"></a>什么样的设计是简约设计？</h3><p>让用户感觉简单才是真正的简单，而不是管理员或工程师的感觉。<br>简单的用户体验是初学者、新手或是压力下的主流用户的体验。<br>简单是让用户感觉自己在掌控一切，他们不想让产品告诉自己该做什么。</p>
<h3 id="明确认识用户，设计主流用户的体验"><a href="#明确认识用户，设计主流用户的体验" class="headerlink" title="明确认识用户，设计主流用户的体验"></a>明确认识用户，设计主流用户的体验</h3><p>用户分为三种：专家型用户、随意型用户、主流用户。<br>去用户使用产品的现场体验。</p>
<h4 id="忽略专家型用户、随意型用户，以主流用户为主"><a href="#忽略专家型用户、随意型用户，以主流用户为主" class="headerlink" title="忽略专家型用户、随意型用户，以主流用户为主"></a>忽略专家型用户、随意型用户，以主流用户为主</h4><p>为什么要忽略他们？要以主流用户为主。</p>
<ul>
<li>这些用户占比较少。</li>
<li>他们体会不到主流用户的体验，专家总是想要一些复杂的功能，主流用户会感觉很不好用。</li>
<li>主流用户最感兴趣的是立即把工作做完，专家刚喜欢首先设定自己的偏好</li>
<li>别指望说明书能帮助用户或者教会用户什么东西，在面临压力时，很容易忘掉已掌握的知识，也没时间看说明书，又回到初学者的层次</li>
<li>专家希望控制和定制技术，主流用户可不管什么软件或技术，他们希望自己掌控起来容易、可靠、迅速。</li>
</ul>
<p>例如书中ipod的例子，专家用户会吐槽功能太少，但销量却很高。</p>
<h4 id="感情需求"><a href="#感情需求" class="headerlink" title="感情需求"></a>感情需求</h4><p>让用户感觉井然有序、易用、轻松自在，从而产生情愫。</p>
<h4 id="增强体验"><a href="#增强体验" class="headerlink" title="增强体验"></a>增强体验</h4><p>在设计产品时，要站在用户的角度分析他们用产品的目的是什么？去增加衍生的体验，要保证通过用户的语言。</p>
<h4 id="用讲故事的形式描述用户体验"><a href="#用讲故事的形式描述用户体验" class="headerlink" title="用讲故事的形式描述用户体验"></a>用讲故事的形式描述用户体验</h4><p>故事很容易让人记住，很方便与人分享，可以把大量的体验融入到一个小故事中。</p>
<h4 id="如何讲一个用户体验故事？"><a href="#如何讲一个用户体验故事？" class="headerlink" title="如何讲一个用户体验故事？"></a>如何讲一个用户体验故事？</h4><p>好的用户故事应该简明、具体、可信且拥有相关细节。<br>三要素： 环境、角色、情节。</p>
<blockquote>
<p> 设计出 <strong>情节</strong> ====== &gt; 有可信的 <strong>角色</strong> ====== &gt; 发生在可信的 <strong>环境</strong></p>
</blockquote>
<h4 id="极端的可用性"><a href="#极端的可用性" class="headerlink" title="极端的可用性"></a>极端的可用性</h4><p>要设计简约的体验就要追求极端的可用性目标。</p>
<table>
<thead>
<tr>
<th style="text-align:center">常规的可用性目标</th>
<th style="text-align:center">简单性的目标</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">特殊人群可以使用</td>
<td style="text-align:center">任何人都可以使用</td>
</tr>
<tr>
<td style="text-align:center">容易使用</td>
<td style="text-align:center">毫不费力的使用</td>
</tr>
<tr>
<td style="text-align:center">快速响应</td>
<td style="text-align:center">瞬间响应</td>
</tr>
<tr>
<td style="text-align:center">快速理解</td>
<td style="text-align:center">一目了解</td>
</tr>
<tr>
<td style="text-align:center">工作可靠</td>
<td style="text-align:center">始终工作</td>
</tr>
<tr>
<td style="text-align:center">直观的错误信息</td>
<td style="text-align:center">不出错</td>
</tr>
<tr>
<td style="text-align:center">完整的信息</td>
<td style="text-align:center">恰好够用的信息</td>
</tr>
<tr>
<td style="text-align:center">用户测试工作</td>
<td style="text-align:center">在混乱无序的环境中工作</td>
</tr>
</tbody>
</table>
<h4 id="用最简单的词汇描述你的想法"><a href="#用最简单的词汇描述你的想法" class="headerlink" title="用最简单的词汇描述你的想法"></a>用最简单的词汇描述你的想法</h4><p>要设计一个东西，首先要拿出一个简洁、清晰、完整的描述(Flip:拍摄和分享视频)，然后再用尽可能简单的方式来实现（瞬间开始拍摄…）。</p>
<h4 id="什么因素对用户行为影响最大？"><a href="#什么因素对用户行为影响最大？" class="headerlink" title="什么因素对用户行为影响最大？"></a>什么因素对用户行为影响最大？</h4><p>如：用户工作中经常被打断。<br>不能凭空想象，需要花更多的时间观察现实中的人，通常可以用原型或者竟争性产品作为辅助。</p>
<h4 id="把需求理解透彻后再着手设计"><a href="#把需求理解透彻后再着手设计" class="headerlink" title="把需求理解透彻后再着手设计"></a>把需求理解透彻后再着手设计</h4><p>根据作者的经验，任何项目的前3个方案大约都是对重要问题的描述，越来越复杂，而且脑里会没了想法，这时就需要坚持不懈。</p>
<h4 id="让参与项目的每个人真正领悟你的认识"><a href="#让参与项目的每个人真正领悟你的认识" class="headerlink" title="让参与项目的每个人真正领悟你的认识"></a>让参与项目的每个人真正领悟你的认识</h4><p>可以见一次讲一次，天天讲，反复讲，直到自己也都厌烦了。。。<br>让人们记住你的核心理念，这样大家在做的时候，就会知道应该要交付什么样的东西。</p>
<h2 id="简约四策略"><a href="#简约四策略" class="headerlink" title="简约四策略"></a>简约四策略</h2><p><img src="simple-dvd.jpg" alt="四策略"></p>
<blockquote>
<p><strong>删除：</strong>去掉所有不必要的按钮，减到不能再减。<br><strong>组织：</strong>按照有意义的标准将按钮划分成组。<br><strong>隐藏：</strong>把那些不是最重要的按钮放在活动仓盖下，避免分散用户注意力。<br><strong>转移：</strong>只要摇控器上保留最基本的功能按钮，将其它控制转移到电视屏幕的菜单，从而将复杂性从遥控器转移到电视。</p>
</blockquote>
<p>这几个策略适用于简化功能或简化内容，每个都各自的优缺点，针对不同问题，去选择正确的策略。</p>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>美国专门从事跟踪ＩＴ项目成败的权威机构 Standish Group 在2002年发表了一份报告，称 64％ 的软件功能 “从未使用或较少使用”。<br>比如你的遥控器有多少个按钮从没有按过。</p>
<blockquote>
<ul>
<li>删除或省略功能可以创造出成功的产品。</li>
<li>删除杂乱的特性可以让设计师更专注于有限的功能，也有助于用户心无旁鹜的完成自己的目标。</li>
</ul>
</blockquote>
<h4 id="避免错删"><a href="#避免错删" class="headerlink" title="避免错删"></a>避免错删</h4><p>一些难做且重要的功能，如果有人强烈反对，得到的答复一般都是 会在“第二阶段”“第三阶段”实现。<br>结果得到一个由简单功能叠加起来的产品，与市场上现有的平庸货别无二致。<br>总结：不能删掉可以增强用户体验且有价值的功能。</p>
<h4 id="增加价值始于核心体验"><a href="#增加价值始于核心体验" class="headerlink" title="增加价值始于核心体验"></a>增加价值始于核心体验</h4><blockquote>
<p>与新增功能相比，客户更关注基本功能的改进。</p>
</blockquote>
<p>要想增强体验，首先不是想着增加新功能，而要看看现有功能是否可以再优化。</p>
<h4 id="砍掉残缺的功能"><a href="#砍掉残缺的功能" class="headerlink" title="砍掉残缺的功能"></a>砍掉残缺的功能</h4><p>保留体验差的功能，会额外导致服务与维护的成本。<br>太多的功能和内容会给用户造成精神上的负担（我到底有没有考虑到这一点？）<br>但要决定扔掉一些功能往往都有点不舍，就像扔掉一些对自己没用的东西一样，也会不舍。</p>
<h4 id="假如用户想…"><a href="#假如用户想…" class="headerlink" title="假如用户想…"></a>假如用户想…</h4><p>“假如用户想…”只会刺激人们的求全心理，担心漏掉了什么需求，为了这份担忧，就要有人付出时间、精力和金钱。<br>总结：不应该凭空想象用户会怎样，一定要实地考查一下用户到底是不是会那样。否则只会浪费资源去设计一些几乎没人用的功能。用户体验，顾名思义是真正用户的体验，而非假想用户的体验。</p>
<h4 id="不能盲目听从客户的意见"><a href="#不能盲目听从客户的意见" class="headerlink" title="不能盲目听从客户的意见"></a>不能盲目听从客户的意见</h4><blockquote>
<p>如果客户提出的功能要求全部放到产品中，很可能导致产品失败。<br>对客户要敢于说不。</p>
</blockquote>
<p>在功能较多的情况下通常要做些适当的牺牲，以免影响整个产品。</p>
<h4 id="方案，不是流程"><a href="#方案，不是流程" class="headerlink" title="方案，不是流程"></a>方案，不是流程</h4><p>当客户或上级提出一个功能需求时，不能只盯着需求的流程，这样很容易跟着需求的想法设计出一些复杂的流程。<br>要把精力集中到客户的目的上，也许有更好的解决方案可以实现他们的流程。</p>
<h4 id="功能太多，可用性降低"><a href="#功能太多，可用性降低" class="headerlink" title="功能太多，可用性降低"></a>功能太多，可用性降低</h4><blockquote>
<p>长远来看，增加功能有害无益<br>功能太多，势必降低产品的可用性，也有可能降低主流用户的满意度，从而有损产品长期的盈利能力。</p>
</blockquote>
<h4 id="删除一项功能，对不同用户影响不同"><a href="#删除一项功能，对不同用户影响不同" class="headerlink" title="删除一项功能，对不同用户影响不同"></a>删除一项功能，对不同用户影响不同</h4><p>想取悦所有用户是不可能的，我们只要专注于目标客户的核心任务，让他们满意就行了</p>
<h4 id="满足用户最高优先级的目标，更有价值"><a href="#满足用户最高优先级的目标，更有价值" class="headerlink" title="满足用户最高优先级的目标，更有价值"></a>满足用户最高优先级的目标，更有价值</h4><p>在不确定什么功能该保留，什么功能该删除时，根据用户最想要达到的目的，排定优先级，如DVD遥控器<br>确定用户使用过程中的干扰源，判断哪些功能是主要的。如：看DVD时接到电话，填写表单时被打断离开等。</p>
<h4 id="减轻用户的负担"><a href="#减轻用户的负担" class="headerlink" title="减轻用户的负担"></a>减轻用户的负担</h4><p>去掉可有可无的选项、内容和分散注意力的视觉效果。<br>去掉这些干扰，可以减轻用户的负担，让用户专心做自己想做的事。<br>去掉视觉元素可以让用户感觉更快，更有安全感。<br><img src="simple-page.jpg" alt="简化网页"></p>
<blockquote>
<p>删除没人会看的文字，比如银行名称下面的口号。<br>简化布局，删除页面右侧的垂直边栏，让人容易分清哪些重要，哪些不重要。<br>去掉重复的链接，例如：“告诉我…”之类的下拉菜单，把可点击项的数量减少了20%。<br>精简按钮和链接的样式，让人容易区分哪些可以点击，哪些不能点击。<br>减少广告位和广告数量，让目标明确的客户不致被这些内容干扰分心。<br>去掉分散注意力的元素，如分隔内容的线和横在页面上的黄色背景条，从而减少了视觉上的干扰。</p>
</blockquote>
<h4 id="选择有限，用户反而更欢喜"><a href="#选择有限，用户反而更欢喜" class="headerlink" title="选择有限，用户反而更欢喜"></a>选择有限，用户反而更欢喜</h4><p>当用户看到一个复杂界面时，会因为看不懂，玩不转而心烦意乱，而乱中更容易出错。<br>太多的选择容易让人反感。</p>
<h4 id="去掉让人分心的东西"><a href="#去掉让人分心的东西" class="headerlink" title="去掉让人分心的东西"></a>去掉让人分心的东西</h4><p>相关研究人员发现，增加文档的超链接会降低读者的理解力，即使读者不会打开超链接也一样。<br>网页上经常会看到很多让人分心的东西，如：标题栏上、侧边栏上。<br>一定要牢记删除那些干扰元素。</p>
<h4 id="聪明的默认值"><a href="#聪明的默认值" class="headerlink" title="聪明的默认值"></a>聪明的默认值</h4><p>默认时是节省用户时间和精力的有效方式，也是清除设计蓝图中“减速带”的首选方式。</p>
<h4 id="从删除选项和首选项开始"><a href="#从删除选项和首选项开始" class="headerlink" title="从删除选项和首选项开始"></a>从删除选项和首选项开始</h4><p>主流用户不喜欢为设置选项和首选项费心劳神。</p>
<h4 id="有时一个选项都多余"><a href="#有时一个选项都多余" class="headerlink" title="有时一个选项都多余"></a>有时一个选项都多余</h4><p>主流用户希望“够好就行了，快点”，而专家则希望“尽可能的完美，等多长时间都愿意”<br>例如：电商的结账页面都去掉了顶部和底部的导航链接，要么买，要么关掉走人。</p>
<h4 id="清除错误是简化用户体验的一个方面"><a href="#清除错误是简化用户体验的一个方面" class="headerlink" title="清除错误是简化用户体验的一个方面"></a>清除错误是简化用户体验的一个方面</h4><p>即使非常小的错误也会让用户烦恼。<br>比如：银行账单查询选择日期控件，公司的工资查询…<br>在设计简单的体验时，关键的一步是确定哪些地方需要错误信息或者检查错误日志，找出常见的错误。</p>
<h4 id="删除视觉混乱元素"><a href="#删除视觉混乱元素" class="headerlink" title="删除视觉混乱元素"></a>删除视觉混乱元素</h4><p>观察设计方案中的每一个元素，想一想为什么需要它？它能提供什么重要信息，还是能提供支持？<br>如果没它不行，就留着，否则就从方案中删除。书中有一些减少视觉混乱的方法（P98）</p>
<h4 id="删除文字"><a href="#删除文字" class="headerlink" title="删除文字"></a>删除文字</h4><p>删除文字有下列三大好处：</p>
<ol>
<li>重要的内容“水落石出”</li>
<li>消除了分析满屏内容的麻烦</li>
<li>读者会对自己看到了什么更有自信</li>
</ol>
<p>应该删除哪些文字？</p>
<ol>
<li>删除引见性文字 “欢迎光临我们网站。。。”</li>
<li>删除不必要的说明 “填写完这些字段后，请您按提交按钮把申请提交给我们”</li>
<li>删除繁锁的解释，比如一些名词解释</li>
<li>使用描述性链接：把标题本身作为链接可以让页面更清爽，不要“单击这些” “更多内容”</li>
</ol>
<h4 id="精简句子"><a href="#精简句子" class="headerlink" title="精简句子"></a>精简句子</h4><p>几乎任何句子都能够精简，任何文字都可以删除。详细方法（p102）<br>总之去掉废话，没必要的词汇。</p>
<h4 id="删除过多"><a href="#删除过多" class="headerlink" title="删除过多"></a>删除过多</h4><p>一些关键的操控功能不能删除，人都希望能掌控局面。<br>足够多的控制可以让用户消除基本需求得不到满足而引发的焦虑，但要避免控制太多，导致因选择而浪费时间。</p>
<h4 id="你能做到"><a href="#你能做到" class="headerlink" title="你能做到"></a>你能做到</h4><p>简单的设计通常出自一位眼光独到的设计师，一位“无情的”或“毫不妥协的”创新者之手，但大多数的团队中，妥协和让步已经成为常态。</p>
<h4 id="“删除”策略的核心"><a href="#“删除”策略的核心" class="headerlink" title="“删除”策略的核心"></a>“删除”策略的核心</h4><p>就是干掉那些分散注意力的因素，聚焦于项目。</p>
<h3 id="组织"><a href="#组织" class="headerlink" title="组织"></a>组织</h3><p>组织是简化设计的最快捷方式。<br>重点：只强调一两个最重要的主题，太多层次用户眼花缭乱</p>
<h4 id="分块"><a href="#分块" class="headerlink" title="分块"></a>分块</h4><p>经典建议，把项组织到“7加减1”个块中；理论上讲，这个数字是人的大脑瞬间能够记住的最大数目。<br>但并不是所有情况都需分块。比如：a-z排序清单</p>
<h4 id="围绕用户的行为进行组织"><a href="#围绕用户的行为进行组织" class="headerlink" title="围绕用户的行为进行组织"></a>围绕用户的行为进行组织</h4><p>先搞清楚主流用户心中的操作步骤，然后再进行组织。建议画出用户的行为，这样更容易理解并组织。</p>
<h4 id="好的分类是非分明"><a href="#好的分类是非分明" class="headerlink" title="好的分类是非分明"></a>好的分类是非分明</h4><p>简单的组织模式具有清晰的界限。有时你会遇到同属于两种类别的东西，太多的重叠会导致困惑。如：西红柿是水果也是蔬菜。<br>所以最简单的分类，通常是指重复交叉最少的分类方法。</p>
<h4 id="字母表与格式排序容易把事情搞乱"><a href="#字母表与格式排序容易把事情搞乱" class="headerlink" title="字母表与格式排序容易把事情搞乱"></a>字母表与格式排序容易把事情搞乱</h4><p>字母表排序时，如果不知道要找的东西叫什么？<br>格式排序时，如果想看相关联的东西就比较麻烦了，如：视频，图片，文字分类</p>
<h4 id="无论是设计还是使用，搜索都比浏览要困难的多"><a href="#无论是设计还是使用，搜索都比浏览要困难的多" class="headerlink" title="无论是设计还是使用，搜索都比浏览要困难的多"></a>无论是设计还是使用，搜索都比浏览要困难的多</h4><p>如果想设计简约的体验，最好先对内容有效的组织，再考虑如何搜索。<br>根据 Jared spool 调查，通常用户只有在网站没有提供有效导航的情况下，才会使用搜索。<br>试想：要找到一个恰当的搜索关键词，然后再从结果中挑选出来，这个过程有多麻烦。</p>
<h4 id="时间和空间排序"><a href="#时间和空间排序" class="headerlink" title="时间和空间排序"></a>时间和空间排序</h4><p>按照时间来组织活动是种简单又通用的方式。<br>一些实体对象，如：酒店，国家之类的，都可以按照空间来组织。</p>
<h4 id="网格布局"><a href="#网格布局" class="headerlink" title="网格布局"></a>网格布局</h4><p>利用不可见的网格来对齐界面元素，是吸引用户注意力的一种有效方式。<br>网格布局也会让人感觉局促和受压制，可以设计一个不对称的布局来解决这个问题。如：奇数列或跨两三列加少量的元素。</p>
<h4 id="大小和位置"><a href="#大小和位置" class="headerlink" title="大小和位置"></a>大小和位置</h4><p>利用网格布局界面时，要注意元素的大小和位置，界面元素的大小要和它们的重要性一致。<br>本书中一条规则：如果一个元素的重要性为1/2，那就把它的大小做成1/4.<br>同等重要的元素设计成一样大，把类似的元素放在一起，能减少视觉干扰。<br>在网站中把重要的链接与内容放中间位置。<br>对于触摸界面，优先把导航按钮放在底部，这样用户触摸时不会遮挡屏幕，而在大触屏上，把导航放在左（右）侧，可能会给习惯右（左）手的人带来不便。</p>
<h4 id="感知分层技术"><a href="#感知分层技术" class="headerlink" title="感知分层技术"></a>感知分层技术</h4><p>利用感知分层技术，我们可以把一些元素放在另一些元素上方，或者两组元素并排起来。如：地铁线路图。<br>感知分层用不同颜色很容易实现，另外，还可以用灰色、阴影、大小缩放，甚至形状变化来实现。书中有详细的技巧（p130）</p>
<h4 id="用颜色标记信息"><a href="#用颜色标记信息" class="headerlink" title="用颜色标记信息"></a>用颜色标记信息</h4><p>分层信息中的颜色利用了人们的记忆原理，因此给人造成的负担很轻，而使用颜色标记信息的代价很明显：需要人们花时间学习和理解。<br>这些标记在确保人们会花时间学习且会重复使用你的设计时，色标很适合，否则会让人困惑。</p>
<h4 id="期望路径"><a href="#期望路径" class="headerlink" title="期望路径"></a>期望路径</h4><p>人们并不总是走你为他们铺好的路。<br>不断重复使用软件流程，看哪个地方总是抓住你的眼球，要抛掉自己的逻辑去感觉…</p>
<h3 id="隐藏"><a href="#隐藏" class="headerlink" title="隐藏"></a>隐藏</h3><p>隐藏都比组织具有一个明显的优势：用户不会因不常用的功能分散注意力。<br>隐藏部分功能是一种低成本的方案，但是，到底该隐藏哪些功能呢？</p>
<h4 id="不常用但不能少"><a href="#不常用但不能少" class="headerlink" title="不常用但不能少"></a>不常用但不能少</h4><p>寻找要隐藏的功能时，设置通常是首选，因为不会经常改变。还有一些不常用的任务。</p>
<h4 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h4><p>自定义可能是一件非常耗时间，非常令人讨厌的事。如：word 中的浮动面板和工具栏。<br>让用户自定义自己的用户界面前提是用户知道如何布局最有效、最高效。</p>
<h4 id="自动定制"><a href="#自动定制" class="headerlink" title="自动定制"></a>自动定制</h4><p>根据用户行为，自动显示或隐藏某些功能菜单。<br>自动定制不会让界面更简单，反而会把界面搞得更复杂，给用户带来极不便。原因有三个：</p>
<ol>
<li>很难保证默认菜单的准确性</li>
<li>缩短菜单后，用户需要把每个功能看两遍才能确定</li>
<li>命令的位置可能会变，用户可能找不到</li>
</ol>
<h4 id="渐进展示"><a href="#渐进展示" class="headerlink" title="渐进展示"></a>渐进展示</h4><p>隐藏高级选项。一般高级选项专家级用户才会用到</p>
<h4 id="阶段展示"><a href="#阶段展示" class="headerlink" title="阶段展示"></a>阶段展示</h4><p>随着用户逐渐深入界面而展示相应功能，要遵循几条规则：</p>
<ul>
<li>设定一种场景</li>
<li>讲一个故事</li>
<li>说用户的语言</li>
<li>把信息分成小块展示</li>
</ul>
<p>向导是一种阶段展示的形式，但却经常违反上述规则。一旦搞错，用户的感觉就像是被推下了滑梯。</p>
<h4 id="适时出现"><a href="#适时出现" class="headerlink" title="适时出现"></a>适时出现</h4><p>书中《纽约时报》的例子，说明了什么叫做成功的隐藏。<br>首先，尽可能彻底的隐藏所有需要隐藏的功能；其次，只在合适的时机，合适的位置上显示相应的功能。</p>
<h4 id="提示与线索"><a href="#提示与线索" class="headerlink" title="提示与线索"></a>提示与线索</h4><p>书中有两个例子，一个好的（ps工具），一个不好的（Google高级）。<br>隐藏处理的好的界面会给人一种优雅的感觉：线索尽管细微，却恰到好处。</p>
<h4 id="让功能容易找到"><a href="#让功能容易找到" class="headerlink" title="让功能容易找到"></a>让功能容易找到</h4><p>把标签放哪比标签大小重要的多。<br>即使标签很小，但要是放在了用户关注点上也会收到良好的效果。<br>用户关注点：当用户打开一个界面时，关注点就广泛。但当遇到问题时，关注点就全聚集在问题区域，如：表单报错，《纽约时报》例子。</p>
<h4 id="隐藏的要求"><a href="#隐藏的要求" class="headerlink" title="隐藏的要求"></a>隐藏的要求</h4><p>1.隐藏一次性功能和选项<br>2.隐藏精确控制选项，但专家用户必须可见<br>3.不可强迫或寄希望于主流用户使用自定义功能，可以给专家用户提供<br>4.巧妙的隐藏，换句话说，彻底隐藏适时出现<br>删除、组织和隐藏——可以非常完美的结合起来，删除不必要的，组织要提供的，隐藏非核心的。不过，接下来我主要讨论的最后一个策略：转移，则涉及对界面进行重新布局。</p>
<h3 id="转移"><a href="#转移" class="headerlink" title="转移"></a>转移</h3><p>把合适的功能转移到合适的设备上，但也要把握度。不要过度的转移，要留下常用的。</p>
<h4 id="在设备之间转移"><a href="#在设备之间转移" class="headerlink" title="在设备之间转移"></a>在设备之间转移</h4><p>有些功能在有些平台上简单，但在其他平台上就变得复杂，如：小米手环。</p>
<h4 id="移动平台与桌面平台"><a href="#移动平台与桌面平台" class="headerlink" title="移动平台与桌面平台"></a>移动平台与桌面平台</h4><p>任何设备都有自己的长处与不足。有时候，把某项任务的某些部分（输入信息）转移到不同平台上可能是一种更好的选择。</p>
<h4 id="向用户转移"><a href="#向用户转移" class="headerlink" title="向用户转移"></a>向用户转移</h4><p>把复杂性转移到用户的头脑中。如作者帮一家旅游网站设计旅行规划程序，第一次，用户反馈差，因为智能型程序不断的评判他们的规划。<br>后来又设计了一个用户可以创建自己命名的文件夹并往里面添加任何想要的东西。</p>
<h4 id="用户最擅长做什么"><a href="#用户最擅长做什么" class="headerlink" title="用户最擅长做什么"></a>用户最擅长做什么</h4><p>用户指挥计算机操作，就会给人简单的感觉。让用户感到简单的一个重要前提，就是先搞清楚把什么工作交给计算机，把什么工作留给用户。</p>
<h4 id="创造开放式体验"><a href="#创造开放式体验" class="headerlink" title="创造开放式体验"></a>创造开放式体验</h4><p>让一个组件有多种用途。如：汽车的挡风玻璃的加热电阻丝同时也是收音机天线。把相似的功能绑定到一起，这种简化方式非常巧妙。找一个功能总比在几个类似功能中选择容易。学习一个功能也比学习多个容易，且一个功能更容易维护。</p>
<h4 id="菜刀与钢琴"><a href="#菜刀与钢琴" class="headerlink" title="菜刀与钢琴"></a>菜刀与钢琴</h4><p>简约界面的最高境界，应该是专家和主流用户都会感觉它非常好用。<br>开放型界面的秘诀在于尽量减少仅适合中级用户的“便捷”特性。</p>
<h4 id="非结构化数据"><a href="#非结构化数据" class="headerlink" title="非结构化数据"></a>非结构化数据</h4><p>表单的输入信息格式不要太严格，如：允许卡号间有空格、电话号码中有｀-,()｀。后台多加几行代码就能解决。</p>
<h4 id="信任用户"><a href="#信任用户" class="headerlink" title="信任用户"></a>信任用户</h4><p>如果想把任务转移到用户一方，你必须相信用户有能力完成该任务。</p>
<h3 id="最后的叮嘱"><a href="#最后的叮嘱" class="headerlink" title="最后的叮嘱"></a>最后的叮嘱</h3><h4 id="顽固的复杂性"><a href="#顽固的复杂性" class="headerlink" title="顽固的复杂性"></a>顽固的复杂性</h4><p>到了设计简单用户体验的最后，往往不是问“怎样才能把这个功能设计的更简单？”，而是问“到底应该把这个复杂性放在哪？”</p>
<h4 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h4><p>书中作者在巴黎坐地铁时，手机上下了一个查路线的应用，发现只写了从几号线倒几号线，但是没有写开往哪个方向，这样作者只能在手机上拖来拖去寻找线路的终点。</p>
<h4 id="给用户留下足够的想象空间"><a href="#给用户留下足够的想象空间" class="headerlink" title="给用户留下足够的想象空间"></a>给用户留下足够的想象空间</h4><p>让他们能够想象到当前正在做的事情同样也是自己生活的一部分。如：在线查找假期旅行线路和查阅手册比较。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[css 强制换行及强制不换行]]></title>
      <url>http://chanh.xyz/2016/06/08/css-%E5%BC%BA%E5%88%B6%E6%8D%A2%E8%A1%8C/</url>
      <content type="html"><![CDATA[<p>默认情况下，元素都有默认的 CSS 属性 white-space:normal（自动换行；ps: 不换行是 nowrap），当内容文字超过所定宽度时会自动换行；但如果其内的文字是堆没有空格的字符（正常情况不会出现这样的字符，但有些BT的测试人员就喜欢这样！），就会溢出容器或者把容器撑大，只有遇到空格时才换行。<br><a id="more"></a></p>
<h2 id="常见解决方案"><a href="#常见解决方案" class="headerlink" title="常见解决方案"></a>常见解决方案</h2><p>主要分两种情况，一是允许切断单词（暴力）换行<code>word-break</code>，二是以单词（单词超过一行时自动换行）为单位换行<code>word-wrap</code>。以IE，Chrome，FF为测试浏览器。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attribute">word-break</span>: break-all; <span class="comment">/* 支持IE，Chrome，低版FF不支持 */</span></span><br><span class="line">  <span class="attribute">word-wrap</span>: break-word; <span class="comment">/* 支持IE，Chrome，FF */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ol>
<li><p><code>word-break:break-all</code> 例如：div宽200px，它的内容就会到200px自动换行，如果该行末端有个英文单词很长（congratulation等），它会把单词截断，变成该行末端为congra(congratulation的前端部分)，下一行为tulation（conguatulation的后端部分）了。<br><code>word-break:break-all</code> 支持版本：IE5以上 该行为与亚洲语言的 normal 相同。也允许非亚洲语言文本行的任意字内断开。该值适合包含一些非亚洲文本的亚洲文本。</p>
<blockquote>
<p><strong>语法：</strong> word-break : normal | break-all | keep-all<br> <strong>参数：</strong> normal : 依照亚洲语言和非亚洲语言的文本规则，允许在字内换行<br> 　　　break-all : 该行为与亚洲语言的normal相同。也允许非亚洲语言文本行的任意字内断开。该值适合包含一些非亚洲文本的亚洲文本<br> 　　　keep-all : 与所有非亚洲语言的normal相同。对于中文，韩文，日文，不允许字断开。适合包含少量亚洲文本的非亚洲文本</p>
</blockquote>
</li>
<li><p><code>word-wrap:break-word</code> 例子与上面一样，但区别就是它会把congratulation整个单词看成一个整体，如果该行末端宽度不够显示整个单词，它会自动把整个单词放到下一行，而不会把单词截断掉的。<br><code>word-wrap:break-word</code> 支持版本：IE5.5以上 内容将在边界内换行。如果需要，词内换行( word-break )也将发生。</p>
<blockquote>
<p><strong>语法：</strong> word-wrap : normal | break-word<br> <strong>参数：</strong> normal : 允许内容顶开指定的容器边界<br> 　　　 break-word : 内容将在边界内换行。如果需要，词内换行用（word-break）也能实现。</p>
</blockquote>
</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>目前 firefox 较新版的浏览器也支持<code>word-break</code> 属性了，所以用一个属性就能搞定所有常用浏览器了，如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attribute">word-break</span>: break-all; <span class="comment">/* 强制换行任意字符，支持IE，Chrome，FF */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>另：</strong> 强制不换行，结束显示省略号<code>...</code>，代码如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap; <span class="comment">/* 强制不换行 */</span></span><br><span class="line">  <span class="attribute">text-overflow</span>:ellipsis; <span class="comment">/* 溢出部分用省略号代替，IE低版本无省略号 */</span></span><br><span class="line">  <span class="attribute">overflow</span>:hidden; <span class="comment">/* 必须设置，否则无省略号 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[一个基于React+Reflux+Webpack+Gulp+Less+React-Router的项目]]></title>
      <url>http://chanh.xyz/2016/06/02/%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8EReact-Reflux-Webpack-Gulp-Less-React-Router%E7%9A%84%E9%A1%B9%E7%9B%AE/</url>
      <content type="html"><![CDATA[<p>此项目基于 <a href="https://github.com/gulpjs/gulp" target="_blank" rel="external">gulp</a>, <a href="https://github.com/less/" target="_blank" rel="external">less</a> 和 <a href="https://github.com/webpack/webpack" target="_blank" rel="external">webpack</a>构建. View 层用 <a href="https://github.com/facebook/react" target="_blank" rel="external">React</a> 实现, 内部数据流使用  <a href="https://github.com/spoike/refluxjs" target="_blank" rel="external">Reflux</a>架构； 路由管理使用 <a href="https://github.com/rackt/react-router" target="_blank" rel="external">React-Router</a>.<br><a id="more"></a></p>
<h2 id="Reflux-架构"><a href="#Reflux-架构" class="headerlink" title="Reflux 架构"></a>Reflux 架构</h2><p>一个单向数据流架构，其中包含三个重要组成部分：Actions, Stores, Components (View)<br>详细参考第三方<a href="https://segmentfault.com/a/1190000002793786" target="_blank" rel="external">中文版API</a><br><img src="/2016/06/02/一个基于React-Reflux-Webpack-Gulp-Less-React-Router的项目/reflux.png" alt="[Reflux架构]" title="[Reflux架构]"></p>
<h2 id="项目文件目录"><a href="#项目文件目录" class="headerlink" title="项目文件目录"></a>项目文件目录</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── dist    <span class="comment">// build目录</span></span><br><span class="line">│  ├── css</span><br><span class="line">│  ├── fonts</span><br><span class="line">│  ├── js</span><br><span class="line">│  └── index<span class="selector-class">.html</span></span><br><span class="line">└── src     <span class="comment">// 源文件目录</span></span><br><span class="line">    ├── images    <span class="comment">// 图片目录</span></span><br><span class="line">    ├── less    <span class="comment">// less 文件目录</span></span><br><span class="line">    ├── scripts     <span class="comment">// js 源码</span></span><br><span class="line">    │   ├── app     <span class="comment">// 与 routes 对应的 smart components （智能组件）</span></span><br><span class="line">    │   │   ├── activity    <span class="comment">// 活动页面的 actions stores view</span></span><br><span class="line">    │   │   │   ├── api     <span class="comment">// ajax 请求</span></span><br><span class="line">    │   │   │   ├── components    <span class="comment">// 活动相关组件 view</span></span><br><span class="line">    │   │   │   ├── stores    <span class="comment">// 活动页面的数据模型层</span></span><br><span class="line">    │   │   │   └── actions<span class="selector-class">.js</span>    <span class="comment">// 活动页面的动作交互</span></span><br><span class="line">    │   │   ├── error     <span class="comment">// 404, 403 UI</span></span><br><span class="line">    │   │   ├── event     <span class="comment">// 事件页面的 actions stores view （与活动类同）</span></span><br><span class="line">    │   │   ├── login     <span class="comment">// 登录页面UI</span></span><br><span class="line">    │   │   └── app<span class="selector-class">.jsx</span>     <span class="comment">// layout UI</span></span><br><span class="line">    │   ├── components    <span class="comment">// 通用木偶(Dumb)组件</span></span><br><span class="line">    │   ├── utils     <span class="comment">// auth 服务，常用工具类</span></span><br><span class="line">    │   ├── config<span class="selector-class">.js</span>     <span class="comment">// 常量配置</span></span><br><span class="line">    │   ├── main<span class="selector-class">.js</span>     <span class="comment">// 把 router 组件绑定到 html</span></span><br><span class="line">    │   └── routes<span class="selector-class">.js</span>     <span class="comment">// 路由配置</span></span><br><span class="line">    └── index.html</span><br></pre></td></tr></table></figure>
<blockquote>
<p>智能(smart)组件：含有状态(state)控制的组件。<br>木偶(Dumb)组件：没有状态(state)控制的展示组件，通常是可复用的部分。</p>
</blockquote>
<h2 id="React-Router-路由配置"><a href="#React-Router-路由配置" class="headerlink" title="React Router 路由配置"></a>React Router 路由配置</h2><p>路由通常是一个单页应用的核心，用来控制不同视图间切换。监听 location 中 hash 的变化来实现不同 components 的展视。<br>此应用的 URLs 与 components 对照：<br>URL                               | Components<br>———————————-|———–<br><code>/</code>                               | <code>App</code><br><code>/activity</code>                       | <code>App -&gt; ActivityManage</code><br><code>/activity/add</code>                   | <code>App -&gt; ActivityManage -&gt; ActivityAdd</code><br><code>/activity/:activityId/edit</code>      | <code>App -&gt; ActivityManage -&gt; ActivityAdd</code><br><code>/activity/:activityId/unit/add</code>  | <code>App -&gt; UnitAdd</code><br><code>/activity/unit/:unitId/edit</code>     | <code>App -&gt; UnitAdd</code><br><code>/activity/:id/detail</code>            | <code>App -&gt; ActivityDetail</code><br><code>/activity/unit/:id/detail</code>       | <code>App -&gt; UnitDetail</code><br><code>/event</code>                          | <code>App -&gt; EventManage</code><br><code>/accessdenied</code>                   | <code>App -&gt; AccessDenied</code><br><code>/*</code>                              | <code>App -&gt; NotFound</code></p>
<h3 id="代码片段"><a href="#代码片段" class="headerlink" title="代码片段"></a>代码片段</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"># src/scripts/routes.js</span><br><span class="line"></span><br><span class="line">import &#123; Router, Route, IndexRoute, IndexRedirect, useRouterHistory, hashHistory &#125; from 'react-router';</span><br><span class="line">import &#123; createHashHistory &#125; from 'history'</span><br><span class="line"></span><br><span class="line">const appHistory = useRouterHistory(createHashHistory)(&#123; queryKey: true &#125;);</span><br><span class="line"></span><br><span class="line">const routes = (</span><br><span class="line">  &lt;Router history=&#123;appHistory&#125;&gt;</span><br><span class="line">    &lt;Route path='/' component=&#123; App &#125; onEnter=&#123;onEnterApp&#125;&gt;</span><br><span class="line">      &lt;IndexRedirect to="activity" /&gt;</span><br><span class="line">      &lt;Route path='activity' component=&#123; ActivityManage &#125; onEnter=&#123;requireAuth.bind(this, roles.activity)&#125; &gt;</span><br><span class="line">        &lt;Route path='add' component=&#123;ActivityAdd&#125; onEnter=&#123;requireAuth.bind(this, roles.activity)&#125; /&gt;</span><br><span class="line">        &lt;Route path=':activityId/edit' component=&#123;ActivityAdd&#125; onEnter=&#123;requireAuth.bind(this, roles.activity)&#125; /&gt;</span><br><span class="line">      &lt;/Route&gt;</span><br><span class="line">      &lt;Route path="activity/:activityId/unit/add" component=&#123;UnitAdd&#125; onEnter=&#123;requireAuth.bind(this, roles.activity)&#125;&gt;&lt;/Route&gt;</span><br><span class="line">      &lt;Route path="activity/unit/:unitId/edit" component=&#123;UnitAdd&#125; onEnter=&#123;requireAuth.bind(this, roles.activity)&#125;&gt;&lt;/Route&gt;</span><br><span class="line">      &lt;Route path="activity/:id/detail" component=&#123;ActivityDetail&#125; onEnter=&#123;requireAuth.bind(this, roles.activity)&#125;&gt;&lt;/Route&gt;</span><br><span class="line">      &lt;Route path="activity/unit/:id/detail" component=&#123;UnitDetail&#125; onEnter=&#123;requireAuth.bind(this, roles.activity)&#125;&gt;&lt;/Route&gt;</span><br><span class="line">      &lt;Route path='event' component=&#123; EventManage &#125; onEnter=&#123;requireAuth.bind(this, roles.event)&#125; /&gt;</span><br><span class="line">      &lt;Route path='accessdenied' component=&#123;AccessDenied&#125;/&gt;</span><br><span class="line">      &lt;Route path='*' component=&#123;NotFound&#125;/&gt;</span><br><span class="line">    &lt;/Route&gt;</span><br><span class="line">  &lt;/Router&gt;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">function onEnterApp(nextState, replace, callback) &#123;</span><br><span class="line">  auth.authorize(null, callback);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function requireAuth(roles, nextState, replace, callback) &#123;</span><br><span class="line">  if(Principal.isIdentityResolved())&#123;</span><br><span class="line">    auth.authorize(roles, callback)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default routes;</span><br></pre></td></tr></table></figure>
<h3 id="Router-的-history-属性"><a href="#Router-的-history-属性" class="headerlink" title="Router 的 history 属性"></a>Router 的 history 属性</h3><p>React Router 是基于history的。所以 history 是 Router 组件上主要的属性。这里的 History 有三种类型 browserHistory, hashHistory, createMemoryHistory。先简单介绍下这三种类型：</p>
<ul>
<li><strong>browserHistory:</strong> 它利用 HTML5 History API 去操纵浏览器的 URL， 并创建真正的 URLs，如：<code>example.com/some/path</code>。同时需要后端程序的配合，把所有前端routes请求都响应index.html。常用在现代浏览器中，IE9及以下体验不好，会刷新整个页面。</li>
<li><strong>hashHistory:</strong> 它利用URL中的hash(#)值来实现视图的切换。如：<code>example.com/#/some/path</code>。这种方式不需要后端做任何操作，同时能兼容低版的浏览器。此项目选用的就是这种类型。</li>
<li><strong>createMemoryHistory:</strong> 此类型不能读写浏览器的地址栏URL。常被用在服务端渲染，也可用于测试和其它环境（如：React Native）.它和上面两种有点小区别，就是必须要先创建才能使用，这样也有助于测试。 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> history = createMemoryHistory(location)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p><strong>注意：</strong>此项目中其实可以在 history 属性中直接引用 hashHistory 的，之所以用当前的方式，是因为参数 <code>{ queryKey: true}</code> 这个参数是个坑，后面详说。<br><strong>queryKey:</strong> 它用来控制地址栏中是否显示<code>?_k=12l0vf</code>这种随机生成的字符参数；它的作用是用来记录路由切换时的 state 数据；如果此值为<code>false</code>就不会显示这个串，但也不能接收到上个视图的数据。<br>当时强迫症使然，觉得这个串太碍眼，觉得没啥大用，所以就查了API把<code>queryKey: false</code>了，结果是我的眼睛爽了，但出现了 Bug，调试了好久。。。才发现是因为这个设置导致不能接收到 <code>location.state</code>，后来就把这个参数置为 <code>true</code>了，等价于使用 <code>hashHistory</code>。</p>
</blockquote>
<h3 id="Route-组件的属性"><a href="#Route-组件的属性" class="headerlink" title="Route 组件的属性"></a>Route 组件的属性</h3><ul>
<li><strong>path:</strong> 此属性设置路由的 URL，与父级拼接形成绝对路径，如：<code>/activity/:activityId/edit</code></li>
<li><strong>component:</strong> 此属性设置对应的组件（component）,也就是此路由对应的视图（view）</li>
<li><strong>onEnter:</strong> 此属性绑定一个路由进入之前的事件回调函数，它有三个参数 nextState, replace, callback. 具体含义不再赘述，参阅官方API；其中第三个参数 callback 如果传入，代表是异步完成，否则是同步。</li>
</ul>
<p>此项目的主页面逻辑较为复杂，个人感觉用 Reflux 搞的有点乱，最近在学习 <a href="http://redux.js.org/" target="_blank" rel="external">Redux</a> 架构，打算有时间重构一下。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[设置 GitHub SSH Keys]]></title>
      <url>http://chanh.xyz/2016/06/01/settingsSSHKeysOfGitHub/</url>
      <content type="html"><![CDATA[<p>让本地git项目与远程的github建立联系，需要设置SSH keys。<br><a id="more"></a></p>
<h2 id="检查-SSH-keys-的设置"><a href="#检查-SSH-keys-的设置" class="headerlink" title="检查 SSH keys 的设置"></a>检查 SSH keys 的设置</h2><p>首先我们需要检查电脑上现有的 ssh key:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/.ssh <span class="comment">#检查本机的ssh密钥</span></span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>如果提示：No such file or directory 说明你机器上不存在旧的 SSH key</p>
</blockquote>
<h2 id="生成新的-SSH-Key"><a href="#生成新的-SSH-Key" class="headerlink" title="生成新的 SSH Key:"></a>生成新的 SSH Key:</h2><p>首先用 ssh-keygen 生成一个密钥</p>
<pre><code>$ ssh-keygen -t rsa -C &quot;邮箱名@youremail.com&quot;
Generating public/private rsa key pair.
Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):&lt;回车就行&gt;
</code></pre><blockquote>
<p>注意：此处的 <code>-C</code> 的是大写的 <code>C</code></p>
</blockquote>
<p>然后会提示输入密码</p>
<pre><code>Enter passphrase (empty for no passphrase):&lt;输入密码&gt;
Enter same passphrase again:&lt;输入密码&gt;
</code></pre><blockquote>
<p>在回车中会提示你输入一个密码，这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入。这个设置是防止别人往你的项目里提交内容。<br><strong>注意：</strong>输入密码的时候没有*字样的，你直接输入就可以了。</p>
</blockquote>
<p>最后看到这样的界面，就成功设置 ssh key 了</p>
<pre><code>Your identification has been saved in
/Users/your_user_directory/.ssh/id_rsa.
Your public key has been saved in
/Users/your_user_directory/.ssh/id_rsa.pub.
The key fingerprint is: f3:ee:40:05:56:ab:fa:ac:14:72:8b:a2:44:ed:75:04 user_name@email.com
</code></pre><h2 id="添加-SSH-key-到-ssh-agent"><a href="#添加-SSH-key-到-ssh-agent" class="headerlink" title="添加 SSH key 到 ssh-agent"></a>添加 SSH key 到 ssh-agent</h2><p>如果检测到本机存在 ssh key， 就要重新生成一个 SSH key, 添加到 ssh-agent</p>
<ol>
<li><p>确保 ssh-agent 是启动的</p>
<pre><code>#启动 ssh-agent
$ eval &quot;$(ssh-agent -s)&quot;
Agent pid 59566
</code></pre><blockquote>
<p>上面是 Git Bash 的格式，如果用其它 terminal 工具，去掉 <code>&quot;&quot;</code> 即可</p>
</blockquote>
</li>
<li><p>添加 SSH key</p>
<pre><code>$ ssh-add ~/.ssh/id_rsa
</code></pre></li>
</ol>
<h2 id="添加-SSH-Key-到-GitHub-账号"><a href="#添加-SSH-Key-到-GitHub-账号" class="headerlink" title="添加 SSH Key 到 GitHub 账号"></a>添加 SSH Key 到 GitHub 账号</h2><p>在本机设置SSH Key之后，需要添加到GitHub上，以完成SSH连接接的设置。</p>
<ol>
<li>打开本地 C:\Documents and Settings\your_user_directory.ssh\id_rsa.pub 文件。此文件里面内容为刚才生成的密钥。如果看不到这个文件，你需要设置显示隐藏文件。准确的复制这个文件的内容，才能保证设置的成功。</li>
<li>登陆github系统。点击右上角的 Settings ??&gt; SSH and GPG keys ??&gt; New SSH key</li>
<li>把你本地生成的密钥复制到里面（key文本框中），Title 可写中文标题，以区分其它绑定的机器， 点击 add SSH key 就 ok 了</li>
</ol>
<h2 id="测试-SSH-连接"><a href="#测试-SSH-连接" class="headerlink" title="测试 SSH 连接"></a>测试 SSH 连接</h2><p>可以输入下面的命令，看看设置是否成功，git@github.com的部分不要修改：</p>
<pre><code>$ ssh -T git@github.com
</code></pre><p>如果是下面的反馈：</p>
<pre><code>The authenticity of host &apos;github.com (207.97.227.239)&apos; can&apos;t be established.
RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.
Are you sure you want to continue connecting (yes/no)?
</code></pre><p>不要紧张，输入yes就好，然后会看到：</p>
<pre><code>Hi chanh! You&apos;ve successfully authenticated, but GitHub does not provide shell access.
</code></pre><p>如果出现如下错误：</p>
<pre><code>Error: Permission denied (publickey).
</code></pre><blockquote>
<p>可以参考官网解决方案：<a href="https://help.github.com/articles/error-permission-denied-publickey/#platform-windows" target="_blank" rel="external">https://help.github.com/articles/error-permission-denied-publickey/#platform-windows</a></p>
</blockquote>
<h2 id="设置-git-全局用户信息"><a href="#设置-git-全局用户信息" class="headerlink" title="设置 git 全局用户信息"></a>设置 git 全局用户信息</h2><p>Git 会根据用户的名字和邮箱来记录提交。GitHub 也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的，名字必须是你的真名，而不是GitHub的昵称。</p>
<pre><code>$ git config --global user.name &quot;username&quot;//用户名
$ git config --global user.email  &quot;emailName@gmail.com&quot;//填写自己的邮箱
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[用hexo在GitHub上写博客]]></title>
      <url>http://chanh.xyz/2016/05/27/%E7%94%A8hexo%E5%9C%A8GitHub%E4%B8%8A%E5%86%99%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p>hexo出自台湾大学生 <a href="http://twitter.com/tommy351" target="_blank" rel="external">tommy351</a> 之手，是一个基于Node.js的静态博客程序，其编译上百篇文字只需要几秒。hexo生成的静态网页可以直接放到GitHub Pages，BAE，SAE等平台上。<br><a id="more"></a></p>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul>
<li>安装NodeJS</li>
<li>安装Git</li>
<li>自己喜欢的编辑器或者IDE</li>
</ul>
<blockquote><p>node和git安装方法官网都有，这里不再赘述；IDE本人用的 Webstorm，适合项目多的使用，比较好用的编辑器有 Subline Text 等</p>
</blockquote>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Node 和 Git 都安装好后，可执行如下命令安装hexo:<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-<span class="keyword">cli</span></span><br></pre></td></tr></table></figure></p>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>然后，执行init命令初始化hexo到你指定的目录：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init <span class="symbol">&lt;folder&gt;</span></span><br><span class="line"><span class="keyword">cd</span> <span class="symbol">&lt;folder&gt;</span></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><br><blockquote><p>也可以先cd到目标目录，然后再执行hexo init.</p>
</blockquote></p>
<h2 id="生成静态页面"><a href="#生成静态页面" class="headerlink" title="生成静态页面"></a>生成静态页面</h2><p>cd 到你的init目录，执行如下命令，生成静态页面至 hexo\public\ 目录：<br><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">generate</span></span><br></pre></td></tr></table></figure><br><blockquote><p>命令必须在init目录下执行，否则不成功，但也不会报错。<br>当你修改文章Tag或内容，不能正确的重新生成内容，可以删除 hexo\db.json 后重试，还不行就到 public 目录删除对应的文件，重新生成。</p>
</blockquote></p>
<h2 id="本地启动"><a href="#本地启动" class="headerlink" title="本地启动"></a>本地启动</h2><p>执行如下命令，启动本地服务，进行文章预览调试。<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">server</span></span><br></pre></td></tr></table></figure><br>浏览器输入 <a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> 就可以看到效果</p>
<h2 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h2><p>执行new命令，生成指定名称的文章至 hexo\source_posts\postName.md。<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">[layout]</span> <span class="string">"postName"</span></span><br></pre></td></tr></table></figure></p>
<ol>
<li>其中 layout 是可选参数，默认值为 post。有哪些 layout 可以在 scaffolds 目录下查看，这些文件名称就是 layout 名称。当然你也可以添加自己的 layout, 方法就是添加一个文件即可，同时你也可以编辑现有的 layout，比如 post 的 layout 默认是 hexo\scaffolds\post.md<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> &#123; &#123; title &#125; &#125;</span><br><span class="line"><span class="attr">date:</span> &#123; &#123; date &#125; &#125;</span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
<blockquote><p>注意：大括号与大括号之间我多加了空格，否则会读出本博文的变量。</p>
</blockquote>
我想添加Categories, 以免每次手工输入，只需要修改这个文件添加一行，如下：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> &#123; &#123; title &#125; &#125;</span><br><span class="line"><span class="attr">date:</span> &#123; &#123; date &#125; &#125;</span><br><span class="line"><span class="attr">categories:</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure></li>
<li>postName是md文件的名字，同时也出现在你文章的URL中，postName如果包含空格，必须用””将其包围，postName可以为中文。<br>看一下刚才生成的文件 hexo\source_posts\postName.md ，内容如下：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> postName <span class="comment">#文章页面上的显示名称，可以任意修改，不会出现在URL中</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2016</span><span class="bullet">-05</span><span class="bullet">-27</span> <span class="number">14</span>:<span class="number">11</span>:<span class="number">07</span> <span class="comment">#文章生成时间，一般不改，当然也可以任意修改</span></span><br><span class="line"><span class="attr">categories:</span> <span class="comment">#文章分类目录，可以为空，注意:后面有个空格</span></span><br><span class="line"><span class="attr">tags:</span> <span class="comment">#文章标签，可空，多标签请用格式[tag1,tag2,tag3]，注意:后面有个空格</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line">这里开始使用markdown格式输入你的正文。</span><br></pre></td></tr></table></figure>
接下来，你就可以用喜爱的编辑器尽情书写你的文章。关于markdown语法，可以查阅官网API。</li>
</ol>
<h2 id="文章摘要"><a href="#文章摘要" class="headerlink" title="文章摘要"></a>文章摘要</h2><p>在需要显示摘要的地方添加如下代码即可：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">以上是摘要</span><br><span class="line"><span class="comment">&lt;!-- more --&gt;</span></span><br><span class="line">以下是余下全文</span><br></pre></td></tr></table></figure><br>more以上内容即是文章摘要，在主页显示，more以下内容点击『 More &gt;&gt; 』链接打开全文才显示。<br><blockquote><p>注意：hexo中所有文件的编码格式均是UTF-8。</p>
</blockquote></p>
<h2 id="主题安装"><a href="#主题安装" class="headerlink" title="主题安装"></a>主题安装</h2><p>萝卜白菜各有所爱，玩博客换主题是必不可少的，hexo 的主题列表 <a href="https://hexo.io/docs/themes.html" target="_blank" rel="external">Hexo Themes</a> 。<br>我比较喜欢 <a href="http://github.com/A-limon/pacman" target="_blank" rel="external">pacman</a> ， <a href="https://github.com/MOxFIVE/hexo-theme-yelee" target="_blank" rel="external">yelee</a> 。 Pacman 简洁大方小清新，同时移动版本支持的也很好，但作者并没有把很多参数分离出来给出可配置项，我最终选择了 yelee, 个人感觉效果更炫一点 。</p>
<ol>
<li><p>安装主题的方法就是一句git命令：</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">https</span>://github.com/MOxFIVE/hexo-theme-yelee.git themes/yelee</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装完成后，打开 hexo_config.yml ，修改主题为 yelee</p>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">theme:</span> yelee</span><br></pre></td></tr></table></figure>
<p>打开 hexo\themes\yelee 目录，编辑主题配置文件 _config.yml ；详细配置参照 <a href="https://github.com/MOxFIVE/hexo-theme-yelee" target="_blank" rel="external">Yelee API</a></p>
</li>
<li><p>更新主题</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes/yelee</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="404-页面"><a href="#404-页面" class="headerlink" title="404 页面"></a>404 页面</h2><p>GitHub Pages 自定义404页面 非常容易，直接在根目录下创建自己的 404.html 就可以。但是自定义404页面仅对绑定顶级域名的项目才起作用，GitHub默认分配的二级域名是不起作用的，使用 hexo server 在本机调试也是不起作用的。<br>其实，404页面可以做更多有意义的事，来做个404公益项目吧。做点有意义的事情，也对得起这个域名。<br>目前有如下几个公益404接入地址，我选择了腾讯的。404页面，每个人可以做的更多。</p>
<ul>
<li><a href="http://www.qq.com/404/" target="_blank" rel="external">腾讯公益404</a></li>
<li><a href="http://yibo.iyiyun.com/Index/web404" target="_blank" rel="external">404公益_益云(公益互联网)社会创新中心</a></li>
<li><a href="http://404page.missingkids.org.tw/" target="_blank" rel="external">失蹤兒童少年資料管理中心404</a></li>
</ul>
<h2 id="申请域名（可选）"><a href="#申请域名（可选）" class="headerlink" title="申请域名（可选）"></a>申请域名（可选）</h2><p>GitHubPages默认为每个用户分配了一个二级域名『your_user_name.github.io』。<br>如果你对上述域名不满意，可以到 <a href="http://www.godaddy.com/" target="_blank" rel="external">狗爹</a> 上申请一个自己的域名，然后绑定到GitHub Pages。绑定方法很简单，在repo根目录下建立一个CNAME文件，里面写上域名即可。</p>
<h3 id="GoDaddy"><a href="#GoDaddy" class="headerlink" title="GoDaddy"></a>GoDaddy</h3><p>买域名首选狗爹，国内的服务商大家都懂的。<br>目前.site域名只要￥20，但据说续费比较贵，我是先玩下，一年后再换，至于搜索引擎重新索引之类的，无所谓。.me和.com域名稍微贵点，大约￥60-100，网上有很多优惠码可用，可惜有的优惠码有限制。比如有个.com域名优惠码只要$0.99，但只能用国外信用卡购买。更多优惠码可以自行谷歌或到 <a href="http://www.dute.me/" target="_blank" rel="external">独特优惠码</a> 找。不着急的同学可以将中意的域名加入购物车先不付款，过几天，狗爹就会发优惠信息给你。狗爹不定期也会有活动，可以多关注。<br>付款后，需要稍微等一会你才会拿到域名，特别是支付宝付款的，要等大约半小时左右。此外域名要一年年的买，这样比较划算。</p>
<h3 id="DNSPod"><a href="#DNSPod" class="headerlink" title="DNSPod"></a>DNSPod</h3><p>GoDaddy的NameServers有时会被墙，因此墙裂推荐国内的 <a href="http://www.dnspod.cn/" target="_blank" rel="external">DNSPod</a> 解析域名，免费服务真心不错。支持微信/邮件提醒，监控与报警，访问统计，健康诊断，搜索引擎推送，速度哇哇的，对于我来说足够。<br>两步设置就可以搞定，怎么操作参考 <a href="http://support.dnspod.cn/Kb/showarticle/tsid/42" target="_blank" rel="external">Godaddy注册商域名修改DNS地址</a> 。</p>
<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="string">"postName"</span> <span class="meta">#新建文章</span></span><br><span class="line">hexo <span class="keyword">new</span> page <span class="string">"pageName"</span> <span class="meta">#新建页面</span></span><br><span class="line">hexo generate <span class="meta">#生成静态页面至public目录</span></span><br><span class="line">hexo <span class="keyword">server</span> <span class="meta">#开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span></span><br><span class="line">hexo deploy <span class="meta">#将.deploy目录部署到GitHub</span></span><br></pre></td></tr></table></figure>
<h3 id="常用复合命令"><a href="#常用复合命令" class="headerlink" title="常用复合命令"></a>常用复合命令</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy -g</span><br><span class="line">hexo <span class="keyword">server</span> -w</span><br></pre></td></tr></table></figure>
<h3 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo n == hexo <span class="keyword">new</span></span><br><span class="line">hexo g == hexo <span class="keyword">generate</span></span><br><span class="line">hexo s == hexo server</span><br><span class="line">hexo d == hexo deploy</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[销售员专用（hybrid app）混合应用]]></title>
      <url>http://chanh.xyz/2015/07/14/salesperson/</url>
      <content type="html"><![CDATA[<p>一个移动端（hybrid app）混合应用，销售员通过域帐号认证登录，查看从 AP 系统推送过来的信息，一键拨打客户电话并且确认是否跟踪订单。<br><a id="more"></a></p>
<h2 id="用到的技术"><a href="#用到的技术" class="headerlink" title="用到的技术"></a>用到的技术</h2><table>
<thead>
<tr>
<th style="text-align:center">移动端</th>
<th style="text-align:center">服务端</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><a href="http://angularjs.org/" target="_blank" rel="external">Angular.js</a> <img src="https://avatars1.githubusercontent.com/u/139426?s=30" alt="Angular.js"></td>
<td style="text-align:center"><a href="http://nodejs.org/" target="_blank" rel="external">Node.js</a> <img src="http://nodejs.org/images/logo-light.svg" height="30" width="80"></td>
</tr>
<tr>
<td style="text-align:center"><a href="http://ionicframework.com/" target="_blank" rel="external">Ionic</a> <img src="http://upload.wikimedia.org/wikipedia/commons/d/d1/Ionic_Logo.svg" height="45" width="80"></td>
<td style="text-align:center"><a href="http://www.mongodb.org/" target="_blank" rel="external">MongoDB</a> <img src="https://avatars3.githubusercontent.com/u/45120?v=2&amp;s=30" alt="MongoDB"></td>
</tr>
<tr>
<td style="text-align:center"><a href="https://material.angularjs.org/" target="_blank" rel="external">Material Design</a> <img src="https://avatars1.githubusercontent.com/u/139426?s=30" alt="Angularjs"></td>
<td style="text-align:center"><a href="http://expressjs.com/" target="_blank" rel="external">Express.js</a><img src="https://cldup.com/wpGXm1cWwB.png" height="40" width="145"></td>
</tr>
<tr>
<td style="text-align:center"><a href="https://cordova.apache.org/" target="_blank" rel="external">Cordova</a> <img src="https://cordova.apache.org/images/cordova_256.png" height="35" width="45">  &nbsp; <a href="https://www.jpush.cn/" target="_blank" rel="external">JPush</a>极光推送</td>
<td style="text-align:center"><a href="http://redis.io/" target="_blank" rel="external">Redis</a> <img src="http://upload.wikimedia.org/wikipedia/en/thumb/6/6b/Redis_Logo.svg/467px-Redis_Logo.svg.png?v=2&s=30" height="35" width="125"></td>
</tr>
</tbody>
</table>
<h2 id="应用架构"><a href="#应用架构" class="headerlink" title="应用架构"></a>应用架构</h2><p>一个端到端的应用架构<br><img src="/2015/07/14/salesperson/salesperson-diagram.png" alt="[应用架构]" title="[应用架构]"></p>
<h3 id="数据库层"><a href="#数据库层" class="headerlink" title="数据库层"></a>数据库层</h3><p>选择MongoDB数据库,因为它易于存储JSON文档，且比较灵活。数据库有3个(collections)集合。</p>
<ol>
<li><p><strong>users</strong> - 存储销售员基本信息, 下面是doc结构：</p>
<figure class="highlight dts"><figcaption><span>User</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="symbol">    name:</span>  <span class="string">"姓名"</span>,</span><br><span class="line"><span class="symbol">    username:</span> <span class="string">"用户名"</span>,</span><br><span class="line"><span class="symbol">    password:</span> <span class="string">"密码"</span>,</span><br><span class="line"><span class="symbol">    salt:</span> <span class="string">""</span>,</span><br><span class="line"><span class="symbol">    sex:</span> <span class="string">"性别"</span>,</span><br><span class="line"><span class="symbol">    nation:</span> <span class="string">"民族"</span>,</span><br><span class="line"><span class="symbol">    provider:</span> <span class="string">"local"</span>,<span class="comment">// passport strategy</span></span><br><span class="line"><span class="symbol">    updated:</span> Date,</span><br><span class="line"><span class="symbol">    created:</span> Date</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 
</li>
<li><p><strong>orders</strong> - 存储销售员的订单信息, 下面是doc结构：</p>
<figure class="highlight actionscript"><figcaption><span>Order</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"_id"</span>: <span class="string">"id2323342"</span>,<span class="comment">// 订单ID</span></span><br><span class="line">    <span class="string">"salesperson"</span>: <span class="string">"wangqh-a"</span>, <span class="comment">//销售员ID</span></span><br><span class="line">    <span class="string">"toTrack"</span>: <span class="literal">false</span> <span class="comment">//是否跟进</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 
</li>
</ol>
<p>从ＡＰ取过来的数据结构:<br><figure class="highlight actionscript"><figcaption><span>AP 订单数据结构</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"_id"</span>: <span class="string">"orderId224324234"</span>,<span class="comment">// 订单ID</span></span><br><span class="line">    <span class="string">"customer"</span>: &#123;</span><br><span class="line">        <span class="string">"id"</span>: <span class="string">"id43214"</span>,</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"李文"</span>,</span><br><span class="line">        <span class="string">"phone"</span>: <span class="string">"15210104324"</span>, <span class="comment">//电话</span></span><br><span class="line">        <span class="string">"company"</span>: <span class="string">"中国海外建设"</span> <span class="comment">//公司名称</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"salesperson"</span>: <span class="string">"wangqh-a"</span>, <span class="comment">//销售员ID</span></span><br><span class="line">    <span class="string">"hasPirate"</span>: <span class="literal">true</span>, <span class="comment">// 是否有盗版</span></span><br><span class="line">    <span class="string">"projects"</span>: [ </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"_id"</span>: <span class="string">"id2343214"</span>,</span><br><span class="line">            <span class="string">"name"</span>: <span class="string">"工程名称"</span>,</span><br><span class="line">            <span class="string">"hasPirate"</span>: <span class="literal">true</span>, <span class="comment">// 是否有盗版</span></span><br><span class="line">            <span class="string">"keys"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">"_id"</span>: <span class="string">"id443324"</span>,</span><br><span class="line">                    <span class="string">"keyNumber"</span>: <span class="string">"v423423"</span>,</span><br><span class="line">                    <span class="string">"isPirate"</span>: <span class="literal">true</span>, <span class="comment">// 是否为盗版</span></span><br><span class="line">                    <span class="string">"notes"</span>: <span class="string">""</span>, <span class="comment">// 备注</span></span><br><span class="line">                    <span class="string">"usedTime"</span>: <span class="number">432142214324</span> <span class="comment">// 使用时间</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> </p>
<h3 id="REST-服务层"><a href="#REST-服务层" class="headerlink" title="REST 服务层"></a>REST 服务层</h3><p>这是整个应用的核心。已认证过的用户，向服务层请求时，根据不同请求作不同的数据库操作。</p>
<ul>
<li>使用Node.js作为服务器</li>
<li>使用express框架实现 REST API</li>
<li>使用mongoose实现数据模型</li>
<li>使用JWT生成和验证Token</li>
<li>使用Redis管理与存储Token</li>
</ul>
<p><strong>服务端 Controller</strong></p>
<ol>
<li>Sign In: <strong>登录</strong> 先在本地库中查询是否存在用户，存在即返回 Token；<br> 不存在就向公司域帐号请求认证，成功后向hr系统请求用户信息并保存到数据库。</li>
<li>Sign Out: <strong>退出</strong> 删除当前 </li>
<li>Order: <strong>订单</strong> 路由：<ul>
<li>orders/notify POST 接收从AP系统推送的销售员ID<code>{&quot;salesperson&quot;: &quot;wangqh-a&quot;}</code>，并用JPush通知到前端。 </li>
<li>orders GET 从AP系统获取订单数据 <code>GET ap.glodon.com/api/salesperson/:userId/orders?limit=10</code>。 </li>
<li>orders/:id/projects GET 根据orderId获得工程列表<code>GET ap.glodon.com/api/salesperson/orders/:orderId/projects</code></li>
<li>orders/projects/:id/keys GET 用projectId 获取 keys(工程内的加密锁列表)<code>GET ap.glodon.com/api/salesperson/orders/projects/:projectId/keys</code></li>
<li>orders/:id/track PUT 跟踪订单：把订单的跟踪状态置为 true</li>
</ul>
</li>
</ol>
<h3 id="客户端层"><a href="#客户端层" class="headerlink" title="客户端层"></a>客户端层</h3><p>下列是主要用到的技术</p>
<ul>
<li>主框架使用 IONIC(cordova + angularJs)</li>
<li>主题使用 Angular Material</li>
<li>消息推送使用 jPush 第三方服务</li>
</ul>
<p><strong> 客户端 Controller </strong></p>
<ol>
<li>Sign In: 登录页</li>
<li>Account: 销售员个人信息页面</li>
<li>Orders: 订单列表页面，列出ap系统推送给销售员的订单</li>
<li>Projects: 工程列表页面，订单的下级页面，列出此订单里的所有工程</li>
<li>keys: 工程详情页，工程的下级页面，列出此工程里的加密锁列表</li>
</ol>
]]></content>
    </entry>
    
  
  
</search>
